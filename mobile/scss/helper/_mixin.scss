@charset 'utf-8';

@use 'sass:math';
@use '../helper/function' as *;


//< 플렉스
@mixin flex-container($direction: row, $wrap: nowrap) {

	display: -ms-flexbox;
	display: -webkit-box;
	display: -webkit-flex;
	display: flex;

	@if $direction == column {
		-webkit-box-orient: vertical;
		@include prefix(flex-direction, $direction, webkit ms);
	}

	@if $wrap == wrap {
		@include prefix(flex-wrap, $wrap, webkit ms);
	}

}
//> 플렉스

//< 미디어 컨텐츠
@mixin fluid-media($padding-top: 56.25%, $padding-bottom: 0) {

	overflow: hidden;
	position: relative;
	padding-top: $padding-top;
	padding-bottom: $padding-bottom;
	width: 100%;
	height: 0;
	@include font('0/1');

	> * {
		position: absolute;
		top: 0;
		right: 0;
		bottom: 0;
		left: 0;
	}

}
//> 미디어 컨텐츠

//< clearfix
@mixin clearfix() {

	&::after {
		display: block;
		clear: both;
		content: '';
	}

}
//> clearfix

//< prefix
@mixin prefix($property, $value, $prefixes: ()) {

	@if $property == flex {
		-webkit-box-flex: $value;
		min-width: 0;
	}
	@else if $property == flex-direction {
		@if $value == row {
			-webkit-box-orient: horizontal;
		}
		@else if $value == row-reverse {
			-webkit-box-orient: horizontal;
			-webkit-box-direction: reverse;
		}
		@else if $value == column {
			-webkit-box-orient: vertical;
		}
		@else if $value == column-reverse {
			-webkit-box-orient: vertical;
			-webkit-box-direction: reverse;
		}
	}
	@else if $property == flex-wrap {
		@if $value == wrap {
			-webkit-box-lines: multiple;
		}
		@else {
			-webkit-box-lines: single;
		}
	}
	@else if $property == align-items {
		@if $value == flex-start {
			-webkit-box-align: start;
			-ms-flex-align: start;
		}
		@else if $value == flex-end {
			-webkit-box-align: end;
			-ms-flex-align: end;
		}
		@else if $value == center {
			-webkit-box-align: center;
			-ms-flex-align: center;
		}
		@else {
			-webkit-box-align: $value;
			-ms-flex-align: $value;
		}
	}
	@else if $property == align-self {
		@if $value == flex-start {
			-ms-grid-row-align: start;
		}
		@else if $value == flex-end {
			-ms-grid-row-align: end;
		}
		@else {
			-ms-grid-row-align: $value;
		}
	}
	@else if $property == justify-content {
		@if $value == flex-start {
			-webkit-box-pack: start;
			-ms-flex-pack: start;
		}
		@else if $value == flex-end {
			-webkit-box-pack: end;
			-ms-flex-pack: end;
		}
		@else if $value == center {
			-webkit-box-pack: center;
			-ms-flex-pack: center;
		}
		@else if $value == space-between {
			-webkit-box-align: justify;
			-ms-flex-pack: justify;
		}
	}

	@each $prefix in $prefixes {
		-#{$prefix}-#{$property}: $value;
	}
	#{$property}: $value;

}
//> prefix

//< browser hack
@mixin hack($browser) {

	@if $browser == ie11 {
		@at-root #{'_:-ms-lang(x)::-ms-backdrop, '} #{&} {
			@content;
		}
	}
	@else if $browser == edge {
		@at-root #{'_:-ms-lang(x)::backdrop, '} #{&} {
			@content;
		}
	}

}
//> browser hack

//< transform + backface-visibility
@mixin transform($value, $origin: null, $visibility: visible) {

	@include prefix(transform, $value, webkit ms);
	@if $origin {
		@include prefix(transform-origin, $origin, webkit ms);
	}
	@if $visibility == hidden {
		@include prefix(backface-visibility, hidden, webkit);
	}

}
//> transform + backface-visibility

//< transition
@mixin transition($args...) {

	@include prefix(transition, $args, webkit);

}
//> transition

//< gradient
@mixin linear-gradient($defaultColor, $angle, $colors...) {

	background-color: $defaultColor;
	background-image: -webkit-linear-gradient($angle, $colors);
	background-image: linear-gradient($angle, $colors);

}
//> gradient

//< 백그라운드 속성 분할
@mixin background($values: null) {

	$isClip: false;
	@each $value in $values {
		@if type-of($value) == color {
			background-color: $value;
		}
		@else if str-index($value, 'url') or str-index($value, 'gradient') or str-index($value, 'none') {
			background-image: $value;
		}
		@else if str-index($value, 'repeat') or index(space round, $value) {
			background-repeat: $value;
		}
		@else if str-index($value, 'box') {
			@if not $isClip {
				background-clip: $value;
				$isClip: true;
			}
			@else {
				background-origin: $value;
			}
		}
		@else if index(scroll fixed local, $value) {
			background-attachment: $value;
		}
		@else if str-index(inspect($value), '"') == 1 {
			$numbers: str-split(unquote($value), '/');
			@for $i from 1 through length($numbers) {
				$number: nth($numbers, $i);
				@if ($number != '') {
					@if $i == 1 {
						background-position: $number;
					}
					@else {
						background-size: $number;
					}
				}
			}
		}
	}

}
//> 백그라운드 속성 분할

//< 대체텍스트
@mixin text-ir($type: blind) {

	@if $type == blind {
		overflow: hidden;
		position: absolute;
		top: 0;
		left: 0;
		width: 0;
		height: 0;
		@include font('0/1');
	} @else if $type == indent {
		overflow: hidden;
		@include font('0/1');
		text-indent: -99999px;
	} @else if $type == wa {
		position: relative;
		z-index: -1;
	}

}
//> 대체텍스트

//< 텍스트 말줄임
@mixin text-ellipsis($line: 1, $replace: ellipsis) {

	@if $line > 0 {
		overflow: hidden;
		text-overflow: $replace;

		@if $line < 2 {
			line-height: 1.4;
			white-space: nowrap;

			br {
				display: none;
			}
		} @else {
			display: -webkit-box;
			-webkit-box-orient: vertical;
			-webkit-line-clamp: $line;
		}
	} @else {
		display: block;
		overflow: visible;
		text-overflow: clip;
		white-space: normal;
		-webkit-line-clamp: 0;

		br {
			display: inline;
		}
	}

}
//> 텍스트 말줄임

//< 웹폰트
@mixin font-face($name, $path, $weight: 400, $exts: woff2 woff, $style: normal) {

	$src: null;
	$src-eot: null;

	$extmods: (
		eot: '#iefix',
		svg: '#' + str-replace($name, ' ', '_')
	);

	$formats: (
		eot: 'embedded-opentype',
		otf: 'opentype',
		ttf: 'truetype'
	);

	@each $ext in $exts {
		$extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
		$format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
		$url: if(type-of($path) == list, nth($path, 1) + '.' + $extmod + '?version=' + nth($path, 2), $path + '.' + $extmod);
		$src: append($src, url(quote($url)) format(quote($format)), comma);
		@if $ext == eot {
			$src-eot: url(quote($path + '.' + $ext));
		}
	}

	@font-face {
		font-weight: $weight;
		font-style: $style;
		font-family: quote($name);
		font-display: swap;
		@if $src-eot {
			src: $src-eot;
		}
		src: $src;
	}

}
//> 웹폰트

//< 폰트 속성 분할
@mixin font($values: (), $options: ()) {

	$isStyle: false;
	@each $value in $values {
		@if type-of($value) == color {
			color: $value;
		}
		@else if not $isStyle and index(normal italic, $value) {
			font-style: $value;
			$isStyle: true;
		}
		@else if index(normal lighter bold bolder 100 200 300 400 500 600 700 800 900, $value) {
			font-weight: $value;
		}
		@else if type-of($value) == list {
			font-family: join($value, [], $bracketed: false);
		}
		@else if str-index(inspect($value), '"') == 1 {
			$sizes: str-split(unquote($value), '/');
			@for $i from 1 through length($sizes) {
				$size: nth($sizes, $i);
				@if ($size != '') {
					@if $i == 1 {
						font-size: $size;
					}
					@else {
						line-height: $size;
					}
				}
			}
		}
		@else if index(left center right justify, $value) {
			text-align: $value;
		}
		@else if index(overline line-through underline none, $value) {
			text-decoration: $value;
		}
	}

	@each $option in $options {
		@if (type-of($option) == number) {
			letter-spacing: $option;
		}
		@else {
			white-space: $option;
		}
	}

}
//> 폰트 속성 분할

//< border triangle
@mixin triangle($color, $direction, $size-width, $size-height: $size-width) {

	width: 0;
	height: 0;
	@include font('0/1');
	border: $size-width solid transparent;

	@if $direction == bottom {
		border-top: $size-height solid $color;
		border-bottom: 0;
	} @else if $direction == top {
		border-top: 0;
		border-bottom: $size-height solid $color;
	} @else if $direction == left {
		border-right: $size-height solid $color;
		border-left: 0;
	} @else if $direction == right {
		border-right: 0;
		border-left: $size-height solid $color;
	} @else if $direction == top-left {
		border-top: $size-height solid $color;
		border-bottom: 0;
		border-left: 0;
	} @else if $direction == top-right {
		border-top: $size-height solid $color;
		border-bottom: 0;
		border-right: 0;
	} @else if $direction == bottom-left {
		border-top: 0;
		border-bottom: $size-height solid $color;
		border-left: 0;
	} @else if $direction == bottom-right {
		border-top: 0;
		border-bottom: $size-height solid $color;
		border-right: 0;
	}

}
//> border triangle

//< opacity IE8
@mixin opacity($opacity, $pointer-events: null) {

	opacity: $opacity;

	@if $pointer-events {
		@include prefix(pointer-events, $pointer-events, ms);
	}

}
//> opacity IE8

//< 모션 키프레임
@mixin keyframes($name) {

	@-webkit-keyframes #{$name} {
		@content;
	}
	@keyframes #{$name} {
		@content;
	}

}
//> 모션 키프레임

//< 미디어쿼리
@mixin media($point) {

	@if $point == XXL {
		@media (min-width: 1600px) { @content; }
	} @else if $point == XL {
		@media (min-width: 1280px) { @content; }
	} @else if $point == L {
		@media (min-width: 1024px) { @content; }
	} @else if $point == M {
		@media (min-width: 768px) { @content; }
	} @else if $point == S {
		@media (min-width: 640px) { @content; }
	} @else if $point == XS {
		@media (min-width: 480px) { @content; }
	} @else if $point == XXS {
		@media (min-width: 375px) { @content; }
	} @else {
		@media ($point) { @content; }
	}

}
//> 미디어쿼리

//< 몬티콘
@mixin monticon($name, $content, $fontFamily: null) {

	$selector: null;

	@if & == null {
		$selector: $name;
	}
	@else if $name == '' {
		$selector: &;
	}
	@else {
		$selector: #{selector-append(&, $name)};
	}
	@at-root #{$selector}::before {
		@if $fontFamily {
			font-family: $fontFamily;
		}
		content: '#{$content}';
	}

}
//> 몬티콘

//< 셀렉터 변경
@mixin context-replace($target-context, $replace-context) {

	@at-root #{selector-replace(&, $target-context, $replace-context)} {
		@content;
	}

}
//> 셀렉터 변경

//< 셀렉터 순서 정리
@mixin context-unify($context) {

	@at-root #{selector-unify(&, $context)} {
		@content;
	}

}
//> 셀렉터 순서 정리

//< 첫 번째 요소에 앞에 셀렉터 추가
@mixin context-first($context) {

	@at-root #{selector-append($context, &)} {
		@content;
	}

}
//> 첫 번째 요소에 앞에 셀렉터 추가

//< 선택한 요소 앞에 셀렉터 추가
@mixin context-before($add-context, $target-context: null) {

	$selectors: ();
	@each $selector in & {
		$context: if($target-context, $target-context, str-slice(inspect($selector), str-last-index(inspect($selector), ' ') + 1, str-length(inspect($selector))));
		$selectors: append($selectors, selector-replace($selector, $context, $add-context + $context), comma);
	}

	@at-root #{$selectors} {
		@content;
	}

}
//> 선택한 요소 앞에 셀렉터 추가

//< 선택한 요소 뒤에 셀렉터 추가
@mixin context-after($add-context, $target-context: null) {

	$selectors: ();
	@each $selector in & {
		$context: if($target-context, $target-context, str-slice(inspect($selector), str-last-index(inspect($selector), ' ') + 1, str-length(inspect($selector))));
		$selectors: append($selectors, selector-replace($selector, $context, $context + $add-context), comma);
	}

	@at-root #{$selectors} {
		@content;
	}

}
//> 선택한 요소 뒤에 셀렉터 추가